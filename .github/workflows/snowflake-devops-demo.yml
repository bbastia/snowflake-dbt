name: "Snowflake DevOps and Terraform Workflow"

on:
    push:
      branches:
        - main
        - dev
      paths:
        - 'migrations/**'
        - '*.tf'
    workflow_dispatch:

jobs:
  devops-and-terraform:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # === Terraform Steps ===

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Debug Event
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Branch Ref: ${{ github.ref }}"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Set Terraform Format Status
        run: echo "TERRAFORM_FMT_STATUS=${{ steps.fmt.outcome }}" >> $GITHUB_ENV

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: terraform plan -no-color

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: terraform apply -auto-approve

      # === Schemachange Steps ===

      - name: Use Python 3.8.x
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.8.x

      - name: Run schemachange
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_ROLE: ${{ secrets.SF_ROLE }}
          SF_WAREHOUSE: ${{ secrets.SF_WAREHOUSE }}
          SF_DATABASE: ${{ secrets.SF_DATABASE }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          python --version
          echo "Step 1: Installing schemachange"
          pip install schemachange
          
          echo "Step 2: Running schemachange"
          schemachange -f $GITHUB_WORKSPACE/migrations -a $SF_ACCOUNT -u $SF_USERNAME -r $SF_ROLE -w $SF_WAREHOUSE -d $SF_DATABASE -c $SF_DATABASE.SCHEMACHANGE.CHANGE_HISTORY --create-change-history-table

      # === Plan Status and PR Comments ===

      - uses: actions/github-script@v5
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fmtStatus = process.env.TERRAFORM_FMT_STATUS || 'unknown';
            const initStatus = steps.init.outcome || 'unknown';
            const validateStatus = steps.validate.outcome || 'unknown';
            const planStatus = steps.plan.outcome || 'unknown';
            const planOutput = steps.plan.outputs.stdout || 'No plan available.';

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
                #### Terraform Format and Style üñå: \`${fmtStatus}\`
                #### Terraform Initialization ‚öôÔ∏è: \`${initStatus}\`
                #### Terraform Validation ü§ñ: \`${validateStatus}\`
                #### Terraform Plan üìñ: \`${planStatus}\`

                <details><summary>Show Plan</summary>

                \`\`\`
                ${planOutput}
                \`\`\`

                </details>

                _Pusher: @${{ github.actor }}_
              `
            });